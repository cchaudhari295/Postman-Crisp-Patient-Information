{
	"info": {
		"_postman_id": "8753f7ac-0dbe-4182-a455-5f323f5f0c25",
		"name": "Crisp Patient Details",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5447556"
	},
	"item": [
		{
			"name": "GetPatientDetailsByIDRequest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"patientId\",pm.iterationData.get('Id'));\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Verify if the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if the response time is less than 300ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - Id, Name, DateOfBirth, and Address\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(patient) {\r",
							"        pm.expect(patient).to.include.all.keys('Id', 'Name', 'DateOfBirth', 'Address');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(patient){\r",
							"    pm.expect(patient.Id).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"DateOfBirth is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.forEach(function(patient) {\r",
							"        pm.expect(patient.DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Address is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(patient) {\r",
							"    pm.expect(patient.Address).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Address should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Patient name matches the test data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    responseData.forEach(function (patient) {\r",
							"        pm.expect(patient.Name).to.be.equal(pm.iterationData.get(\"Name\"));\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/patients/query/?Id={{patientId}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"patients",
						"query",
						""
					],
					"query": [
						{
							"key": "Id",
							"value": "{{patientId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPatientDetailsByIInvalidDRequest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"    //invalid Id\r",
							"    \r",
							"    pm.variables.set(\"Id\",123);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody=pm.response.json();\r",
							"\r",
							"let test;\r",
							"pm.test(\"Verify when invalid Id is passed\", function () {\r",
							"    pm.expect(responseBody[0]).to.have.property('Id');\r",
							"    test=true;\r",
							"});\r",
							"\r",
							"if(test){\r",
							"\r",
							"pm.test(\"Verify the error message when Id is invalid\", function () {\r",
							"    pm.expect(responseBody[0].DateOfBirth).to.equal(\"Invalid Id is provided\");\r",
							"});\r",
							"}\r",
							"   \r",
							"pm.test(\"Verify if the status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/patients/query/?Id={{Id}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"patients",
						"query",
						""
					],
					"query": [
						{
							"key": "Id",
							"value": "{{Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPatientDetailsByNameRequest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"patientName\",pm.iterationData.get(\"Name\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - Id, Name, DateOfBirth, and Address\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(patient) {\r",
							"        pm.expect(patient).to.include.all.keys('Id', 'Name', 'DateOfBirth', 'Address');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(patient){\r",
							"    pm.expect(patient.Id).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"DateOfBirth is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.forEach(function(patient) {\r",
							"        pm.expect(patient.DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Address is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(patient) {\r",
							"    pm.expect(patient.Address).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Address should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Patient name matches the test data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    responseData.forEach(function (patient) {\r",
							"        pm.expect(patient.Name).to.be.equal(pm.iterationData.get(\"Name\"));\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/patients/query/?Name={{patientName}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"patients",
						"query",
						""
					],
					"query": [
						{
							"key": "Name",
							"value": "{{patientName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPatientDetailsByInvalidNameRequest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"//Invalid name\r",
							"    pm.variables.set(\"Name\",\"Tina\");\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"let test;\r",
							"pm.test(\"Verify if the Name is undefined\", function () {\r",
							"    pm.expect(responseBody[0].Name, 'Name is not available or undefined').to.not.be.undefined;\r",
							"    test = false;\r",
							"});\r",
							"\r",
							"if (test) {\r",
							"    pm.test(\"Verify the error message when Name is invalid\", function () {\r",
							"        pm.expect(responseBody[0].Name).to.equal(\"Invalid Name is provided\");\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.test(\"Verify if the status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://apimgmt-dev-crisp.azure-api.net/patients/query/?Name={{Name}}",
					"protocol": "https",
					"host": [
						"apimgmt-dev-crisp",
						"azure-api",
						"net"
					],
					"path": [
						"patients",
						"query",
						""
					],
					"query": [
						{
							"key": "Name",
							"value": "{{Name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPatientDetailsByAddressRequest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"patientAddress\",pm.iterationData.get(\"Address\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"\r",
							"pm.test(\"Verify if the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if the response time is less than 300ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - Id, Name, DateOfBirth, and Address\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(patient) {\r",
							"        pm.expect(patient).to.include.all.keys('Id', 'Name', 'DateOfBirth', 'Address');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(patient){\r",
							"    pm.expect(patient.Id).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"DateOfBirth is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.forEach(function(patient) {\r",
							"        pm.expect(patient.DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Address is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(patient) {\r",
							"    pm.expect(patient.Address).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Address should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Patient name matches the test data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    responseData.forEach(function (patient) {\r",
							"        pm.expect(patient.Name).to.be.equal(pm.iterationData.get(\"Name\"));\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://apimgmt-dev-crisp.azure-api.net/patients/query/?Address={{patientAddress}}",
					"protocol": "https",
					"host": [
						"apimgmt-dev-crisp",
						"azure-api",
						"net"
					],
					"path": [
						"patients",
						"query",
						""
					],
					"query": [
						{
							"key": "Address",
							"value": "{{patientAddress}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPatientDetailsByInvalidAddressRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody = pm.response.json();\r",
							"\r",
							"let test;\r",
							"pm.test(\"Verify when invalid address is provided\", function () {\r",
							"    pm.expect(responseBody[0]).to.have.property('Address');\r",
							"    test=true;\r",
							"});\r",
							"\r",
							"if(test){\r",
							"pm.test(\"Verify if the Address is a string\", function () {\r",
							"    pm.expect(responseBody[0].Address).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message when address is invalid\", function () {\r",
							"    pm.expect(responseBody[0].Address).to.equal(\"Invalid address is provided\");\r",
							"});\r",
							"}\r",
							"\r",
							"pm.test(\"Verify if the status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							"    pm.variables.set(\"Address\",\"AL\")\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://apimgmt-dev-crisp.azure-api.net/patients/query/?Address={{Address}}",
					"protocol": "https",
					"host": [
						"apimgmt-dev-crisp",
						"azure-api",
						"net"
					],
					"path": [
						"patients",
						"query",
						""
					],
					"query": [
						{
							"key": "Address",
							"value": "{{Address}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPatientDetailsByValidDateOfBirthRequest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"patientDateOfBirth\",pm.iterationData.get(\"DateOfBirth\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if the response time is less than 300ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - Id, Name, DateOfBirth, and Address\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(patient) {\r",
							"        pm.expect(patient).to.include.all.keys('Id', 'Name', 'DateOfBirth', 'Address');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(patient){\r",
							"    pm.expect(patient.Id).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"DateOfBirth is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    responseData.forEach(function(patient) {\r",
							"        pm.expect(patient.DateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Address is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(patient) {\r",
							"    pm.expect(patient.Address).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Address should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Patient name matches the test data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    responseData.forEach(function (patient) {\r",
							"        pm.expect(patient.Name).to.be.equal(pm.iterationData.get(\"Name\"));\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://apimgmt-dev-crisp.azure-api.net/patients/query/?DateOfBirth={{patientDateOfBirth}}",
					"protocol": "https",
					"host": [
						"apimgmt-dev-crisp",
						"azure-api",
						"net"
					],
					"path": [
						"patients",
						"query",
						""
					],
					"query": [
						{
							"key": "DateOfBirth",
							"value": "{{patientDateOfBirth}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPatientDetailsByInvalidDateOfBirthRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseBody = pm.response.json();\r",
							"\r",
							"let test;\r",
							"pm.test(\"Verify when invalid DateOfBirth is passed\", function () {\r",
							"    pm.expect(responseBody[0]).to.have.property('DateOfBirth');\r",
							"    test=true;\r",
							"});\r",
							"\r",
							"if(test){\r",
							"pm.test(\"Verify whether DateOfBirth is a string\", function () {\r",
							"    pm.expect(responseBody[0].DateOfBirth).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the error message when DateOfBirth is invalid\", function () {\r",
							"    pm.expect(responseBody[0].DateOfBirth).to.equal(\"Invalid DateOfBirth is provided\");\r",
							"});\r",
							"}\r",
							"\r",
							"pm.test(\"Verify if the status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							"    pm.variables.set(\"DateOfBirth\",\"1926-05-01\")\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/patients/query/?DateOfBirth={{DateOfBirth}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"patients",
						"query",
						""
					],
					"query": [
						{
							"key": "DateOfBirth",
							"value": "{{DateOfBirth}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "patientId",
			"value": ""
		},
		{
			"key": "patientName",
			"value": ""
		},
		{
			"key": "patientAddress",
			"value": ""
		},
		{
			"key": "patientDateOfBirth",
			"value": ""
		}
	]
}